{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const CATEGORIES = ['Codecademy', 'EdX', 'freeCodeCamp', 'Udacity', 'Coursera', 'Linkedin Learning', 'MITx', 'Udemy', 'HarvardX'];\nconst initialState = Object.fromEntries(CATEGORIES.map(category => [category, []]));\nconst transactionsSlice = createSlice({\n  name: 'transactions',\n  initialState: initialState,\n  reducers: {\n    addTransaction: (state, action) => {\n      // add the new transaction object (action.payload) to the correct category’s transaction list in the transactions state object.\n      const category = action.payload.category;\n      state[category].push(action.payload);\n    },\n    // Add a deleteTransaction property \n    deleteTransaction: (state, action) => {\n      // In the deletedIndex in transactionsReducer, action.payload.category and action.payload.id are both used. \n      const id = action.payload.id;\n      const category = action.payload.category;\n      // It should delete the old transaction (action.payload) from the correct category’s transaction list in the transactions state object.\n      // 1. Find the category in `state` that matches the `category` property on `action.payload`\n      // 2.  Filter out the old transaction (the transaction with an `id` matching the `id` property on `action.payload`) from that category's transaction array.\n      state[category] = state[category].filter(transaction => transaction.id !== id);\n    }\n  }\n});\nexport const selectTransactions = state => state.transactions;\nexport const selectFlattenedTransactions = state => Object.values(state.transactions).reduce((a, b) => [...a, ...b], []);\nexport const {\n  addTransaction,\n  deleteTransaction\n} = transactionsSlice.actions;\nexport default transactionsSlice.reducer;","map":{"version":3,"names":["createSlice","CATEGORIES","initialState","Object","fromEntries","map","category","transactionsSlice","name","reducers","addTransaction","state","action","payload","push","deleteTransaction","id","filter","transaction","selectTransactions","transactions","selectFlattenedTransactions","values","reduce","a","b","actions","reducer"],"sources":["C:/Users/Andres R. Bucheli/Desktop/SOFTWARE ENGINEER/PORTFOLIO/REFACTORED-PROJECTS/MY-CODING-EDUCATION-BUDGET/src/features/transactions/transactionsSlice.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\nexport const CATEGORIES = ['Codecademy', 'EdX', 'freeCodeCamp', 'Udacity', 'Coursera', 'Linkedin Learning', 'MITx', 'Udemy', 'HarvardX'];\r\nconst initialState = Object.fromEntries(CATEGORIES.map(category => [category, []]))\r\n\r\nconst transactionsSlice = createSlice({\r\n  name: 'transactions',\r\n  initialState: initialState,\r\n  reducers: {\r\n    addTransaction: (state, action) => {\r\n      // add the new transaction object (action.payload) to the correct category’s transaction list in the transactions state object.\r\n      const category = action.payload.category;\r\n      state[category].push(action.payload);\r\n    },\r\n    // Add a deleteTransaction property \r\n    deleteTransaction: (state, action) => {\r\n      // In the deletedIndex in transactionsReducer, action.payload.category and action.payload.id are both used. \r\n      const id = action.payload.id;\r\n      const category = action.payload.category;\r\n      // It should delete the old transaction (action.payload) from the correct category’s transaction list in the transactions state object.\r\n      // 1. Find the category in `state` that matches the `category` property on `action.payload`\r\n      // 2.  Filter out the old transaction (the transaction with an `id` matching the `id` property on `action.payload`) from that category's transaction array.\r\n      state[category] = state[category].filter(transaction => transaction.id !== id)\r\n    }\r\n  },\r\n});\r\n\r\nexport const selectTransactions = (state) => state.transactions;\r\nexport const selectFlattenedTransactions = (state) => Object.values(state.transactions).reduce((a,b) => [...a, ...b], []);\r\n\r\nexport const { addTransaction, deleteTransaction } = transactionsSlice.actions;\r\nexport default transactionsSlice.reducer;\r\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAE5C,OAAO,MAAMC,UAAU,GAAG,CAAC,YAAY,EAAE,KAAK,EAAE,cAAc,EAAE,SAAS,EAAE,UAAU,EAAE,mBAAmB,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC;AACxI,MAAMC,YAAY,GAAGC,MAAM,CAACC,WAAW,CAACH,UAAU,CAACI,GAAG,CAACC,QAAQ,IAAI,CAACA,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;AAEnF,MAAMC,iBAAiB,GAAGP,WAAW,CAAC;EACpCQ,IAAI,EAAE,cAAc;EACpBN,YAAY,EAAEA,YAAY;EAC1BO,QAAQ,EAAE;IACRC,cAAc,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjC;MACA,MAAMN,QAAQ,GAAGM,MAAM,CAACC,OAAO,CAACP,QAAQ;MACxCK,KAAK,CAACL,QAAQ,CAAC,CAACQ,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC;IACtC,CAAC;IACD;IACAE,iBAAiB,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACpC;MACA,MAAMI,EAAE,GAAGJ,MAAM,CAACC,OAAO,CAACG,EAAE;MAC5B,MAAMV,QAAQ,GAAGM,MAAM,CAACC,OAAO,CAACP,QAAQ;MACxC;MACA;MACA;MACAK,KAAK,CAACL,QAAQ,CAAC,GAAGK,KAAK,CAACL,QAAQ,CAAC,CAACW,MAAM,CAACC,WAAW,IAAIA,WAAW,CAACF,EAAE,KAAKA,EAAE,CAAC;IAChF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMG,kBAAkB,GAAIR,KAAK,IAAKA,KAAK,CAACS,YAAY;AAC/D,OAAO,MAAMC,2BAA2B,GAAIV,KAAK,IAAKR,MAAM,CAACmB,MAAM,CAACX,KAAK,CAACS,YAAY,CAAC,CAACG,MAAM,CAAC,CAACC,CAAC,EAACC,CAAC,KAAK,CAAC,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,EAAE,EAAE,CAAC;AAEzH,OAAO,MAAM;EAAEf,cAAc;EAAEK;AAAkB,CAAC,GAAGR,iBAAiB,CAACmB,OAAO;AAC9E,eAAenB,iBAAiB,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}